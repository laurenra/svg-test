{"version":3,"file":"main.js","mappings":"kDAyMA,MAAMA,EAAU,IArMhB,MASE,WAAAC,GACEC,KAAKC,WAAY,EACjBD,KAAKE,aAAe,GACpBF,KAAKG,kBAAoB,CAAEC,cAAe,GAAIC,SAAS,GACvDL,KAAKM,mBAAqB,CAAEF,cAAe,GAAIC,SAAS,GACxDL,KAAKO,mBAAqB,CAAEH,cAAe,GAAIC,SAAS,GACxDL,KAAKQ,gBAAkB,CAAEJ,cAAe,GAAIC,SAAS,EACvD,CAEA,WAAAI,GACET,KAAKC,WAAY,CACnB,CAWA,iBAAAS,CAAkBC,GAChB,MAAMC,EAAUC,SAASC,eAAeH,GACxC,GAAIC,EAAS,CACYG,iBAAiBH,GAASI,KACjD,IAAIC,EAAYL,EAAQM,aAAa,QAEhClB,KAAKG,kBAAkBE,UAC1BL,KAAKG,kBAAoB,CACvBC,cAAea,QAAAA,EAAa,GAC5BZ,SAAS,IAGTY,GAAajB,KAAKG,kBAAkBC,cACtCQ,EAAQO,aAAa,OAAQ,SAE7BP,EAAQO,aAAa,OAAQnB,KAAKG,kBAAkBC,cAExD,CAEF,CAuBA,kBAAAgB,CAAmBT,GACjB,MAAMC,EAAUC,SAASC,eAAeH,GACxC,GAAIC,EAAS,CACX,MAAMS,EAAiBN,iBAAiBH,GAASI,KACjCJ,EAAQM,aAAa,QAEhClB,KAAKM,mBAAmBD,UAC3BL,KAAKM,mBAAqB,CACxBF,cAAeiB,QAAAA,EAAkB,GACjChB,SAAS,IAGTgB,GAAkBrB,KAAKM,mBAAmBF,cAE5CQ,EAAQU,MAAMN,KAAO,OAGrBJ,EAAQU,MAAMN,KAAOhB,KAAKM,mBAAmBF,aAEjD,CAEF,CAEA,WAAAmB,GACE,MAAMX,EAAUC,SAASC,eAAe,aACpCF,IACqBG,iBAAiBH,GAASI,KAEhC,QADDJ,EAAQM,aAAa,QAEnCN,EAAQO,aAAa,OAAQ,gBAE7BP,EAAQO,aAAa,OAAQ,QAInC,CAEA,UAAAK,CAAWb,GACT,MAAMC,EAAUC,SAASC,eAAeH,GACpCC,IACqBG,iBAAiBH,GAASI,KAEhC,UADDJ,EAAQM,aAAa,QAEnCN,EAAQO,aAAa,OAAQ,QAE7BP,EAAQO,aAAa,OAAQ,UAInC,CAEA,OAAAM,GACE,MAAMb,EAAUC,SAASC,eAAe,SACpCF,IACqBG,iBAAiBH,GAASI,KAEhC,SADDJ,EAAQM,aAAa,QAEnCN,EAAQO,aAAa,OAAQ,UAE7BP,EAAQO,aAAa,OAAQ,SAInC,CAMA,eAAAO,CAAgBf,GACd,MAAMC,EAAUC,SAASC,eAAeH,GACxC,GAAIC,EAAS,CACX,MAAMS,EAAiBN,iBAAiBH,GAASI,KACjCJ,EAAQM,aAAa,QAEhClB,KAAKO,mBAAmBF,UAC3BL,KAAKO,mBAAqB,CACxBH,cAAeiB,QAAAA,EAAkB,GACjChB,SAAS,IAGTgB,GAAkBrB,KAAKO,mBAAmBH,cAE5CQ,EAAQU,MAAMN,KAAO,OAGrBJ,EAAQU,MAAMN,KAAOhB,KAAKO,mBAAmBH,aAEjD,CAEF,CAEA,OAAAuB,CAAQhB,GACN,MAAMC,EAAUC,SAASC,eAAeH,GACxC,GAAIC,EAAS,CACX,MAAMgB,EAAWhB,EAAQiB,cAAc,cACvC,GAAID,EAAU,CACZ,MAAMP,EAAiBN,iBAAiBa,GAAUZ,KAClCY,EAASV,aAAa,QAEjClB,KAAKQ,gBAAgBH,UACxBL,KAAKQ,gBAAkB,CACrBJ,cAAeiB,QAAAA,EAAkB,GACjChB,SAAS,IAGTgB,GAAkBrB,KAAKQ,gBAAgBJ,cAEzCwB,EAAST,aAAa,OAAQ,QAG9BP,EAAQO,aAAa,OAAQnB,KAAKQ,gBAAgBJ,cAEtD,CACF,CAEF,GAUuC,QAAzC,EAAAS,SAASC,eAAe,yBAAiB,SAAEgB,iBAAiB,SAAS,WACnEhC,EAAQY,kBAAkB,iBAC5B,IAC0C,QAA1C,EAAAG,SAASC,eAAe,0BAAkB,SAAEgB,iBAAiB,SAAS,WACpEhC,EAAQsB,mBAAmB,kBAC7B,IACoC,QAApC,EAAAP,SAASC,eAAe,oBAAY,SAAEgB,iBAAiB,QAAShC,EAAQyB,aACrC,QAAnC,EAAAV,SAASC,eAAe,mBAAW,SAAEgB,iBAAiB,SAAS,WAC7DhC,EAAQ0B,WAAW,WACrB,IACgC,QAAhC,EAAAX,SAASC,eAAe,gBAAQ,SAAEgB,iBAAiB,QAAShC,EAAQ2B,SACjC,QAAnC,EAAAZ,SAASC,eAAe,mBAAW,SAAEgB,iBAAiB,SAAS,WAC7DhC,EAAQ0B,WAAW,WACrB,IACmC,QAAnC,EAAAX,SAASC,eAAe,mBAAW,SAAEgB,iBAAiB,SAAS,WAC7DhC,EAAQ0B,WAAW,WACrB,IAGgC,QAAhC,EAAAX,SAASC,eAAe,gBAAQ,SAAEgB,iBAAiB,SAAS,WAC1DhC,EAAQ6B,QAAQ,QAClB,IAGkC,QAAlC,EAAAd,SAASC,eAAe,kBAAU,SAAEgB,iBAAiB,SAAS,WAC5DhC,EAAQ4B,gBAAgB,UAC1B,IACAK,QAAQC,KAAK,8B","sources":["webpack://svga/./src/ts/svg-test.ts"],"sourcesContent":["/**\n * SVG click handlers\n */\n\nclass SvgTest {\n\n  private isShowSvg: boolean;\n  private fileLocation: string;\n  private circleFillAttrRGB: { originalColor: string, isSaved: boolean };\n  private circleFillStyleRGB: { originalColor: string, isSaved: boolean };\n  private svgCountryStyleRGB: { originalColor: string, isSaved: boolean };\n  private svgRoomStyleRGB: { originalColor: string, isSaved: boolean };\n\n  constructor() {\n    this.isShowSvg = false;\n    this.fileLocation = \"\";\n    this.circleFillAttrRGB = { originalColor: '', isSaved: false };\n    this.circleFillStyleRGB = { originalColor: '', isSaved: false };\n    this.svgCountryStyleRGB = { originalColor: '', isSaved: false };\n    this.svgRoomStyleRGB = { originalColor: '', isSaved: false };\n  }\n\n  setDefaults() {\n    this.isShowSvg = false;\n  }\n\n  /**\n   * When fill color is set as a fill attribute (rather than a fill style),\n   * 1. element.getAttribute('fill') will return the value set in the element's\n   *    fill= attribute, which can be fill='red' or fill='#ff0000' or\n   *    fill='rgb(255, 0, 0)'\n   * 2. getComputedStle(element).fill will return the resolved (computed)\n   *    rgb() or rgba() value. If fill='red' this is resolved to rgb(255, 0, 0).\n   * @param objectId\n   */\n  svgCircleFillAttr(objectId: string) {\n    const thisSvg = document.getElementById(objectId);\n    if (thisSvg) {\n      const styleFillColor = getComputedStyle(thisSvg).fill;\n      let fillColor = thisSvg.getAttribute('fill');\n      // Get original color and save it.\n      if (!this.circleFillAttrRGB.isSaved) {\n        this.circleFillAttrRGB = {\n          originalColor: fillColor ?? '',\n          isSaved: true\n        };\n      }\n      if (fillColor == this.circleFillAttrRGB.originalColor) {\n        thisSvg.setAttribute('fill', 'green');\n      } else {\n        thisSvg.setAttribute('fill', this.circleFillAttrRGB.originalColor);\n      }\n    }\n    // alert(\"You clicked the circle\");\n  }\n\n  /**\n   * When an element fill attribute and fill style are both set, which is\n   * actually used? What is the specificity?\n   */\n\n  /**\n   * When fill color is set as a fill style (rather than a fill attribute),\n   * 1. element.getAttribute('fill') will return a null.\n   * 2. getComputedStle(element).fill will return the resolved (computed)\n   *    rgb() or rgba() value. If fill: red or fill: #ff0000 or\n   *    fill: rgb(255, 0, 0), this is always resolved to rgb(255, 0, 0).\n   * 3. You can set the style with a named color (red), hex color (#ff0000),\n   *    or an rgb() or rgba() color like rgb(255, 0, 0) or rgba(255, 0, 0, 1)\n   *    using element.style.fill.\n   * 4. When both a fill style and a fill attribute are defined for an\n   *    element, the fill style is used because it has greater specificity.\n   * 5. When a fill style is defined in the element and in a CSS file for\n   *    that element ID, the fill style in the element is used because it has\n   *    greater specificity than the one in the CSS file.\n   * @param objectId\n   */\n  svgCircleFillStyle(objectId: string) {\n    const thisSvg = document.getElementById(objectId);\n    if (thisSvg) {\n      const styleFillColor = getComputedStyle(thisSvg).fill;\n      let fillColor = thisSvg.getAttribute('fill');\n      // Get original color and save it.\n      if (!this.circleFillStyleRGB.isSaved) {\n        this.circleFillStyleRGB = {\n          originalColor: styleFillColor ?? '',\n          isSaved: true\n        };\n      }\n      if (styleFillColor == this.circleFillStyleRGB.originalColor) {\n        // thisSvg.setAttribute('fill', 'blue');\n        thisSvg.style.fill = 'blue';\n      } else {\n        // thisSvg.setAttribute('fill', 'orange');\n        thisSvg.style.fill = this.circleFillStyleRGB.originalColor;\n      }\n    }\n    // alert(\"You clicked the circle\");\n  }\n\n  svgTriangle() {\n    const thisSvg = document.getElementById(\"triangle1\");\n    if (thisSvg) {\n      const styleFillColor = getComputedStyle(thisSvg).fill;\n      let fillColor = thisSvg.getAttribute('fill');\n      if (fillColor == 'lime') {\n        thisSvg.setAttribute('fill', 'lightskyblue');\n      } else {\n        thisSvg.setAttribute('fill', 'lime');\n      }\n    }\n    // alert(\"You clicked the triangle\");\n  }\n\n  svgHexagon(objectId: string) {\n    const thisSvg = document.getElementById(objectId);\n    if (thisSvg) {\n      const styleFillColor = getComputedStyle(thisSvg).fill;\n      let fillColor = thisSvg.getAttribute('fill');\n      if (fillColor == 'orchid') {\n        thisSvg.setAttribute('fill', 'aqua');\n      } else {\n        thisSvg.setAttribute('fill', 'orchid');\n      }\n    }\n    // alert(\"You clicked the hexagon\");\n  }\n\n  svgStar() {\n    const thisSvg = document.getElementById(\"star1\");\n    if (thisSvg) {\n      const styleFillColor = getComputedStyle(thisSvg).fill;\n      let fillColor = thisSvg.getAttribute('fill');\n      if (fillColor == 'coral') {\n        thisSvg.setAttribute('fill', 'yellow');\n      } else {\n        thisSvg.setAttribute('fill', 'coral');\n      }\n    }\n    // alert(\"You clicked the star\");\n  }\n\n  /**\n   *\n   * @param countryId\n   */\n  svgCountryStyle(objectId: string) {\n    const thisSvg = document.getElementById(objectId);\n    if (thisSvg) {\n      const styleFillColor = getComputedStyle(thisSvg).fill;\n      let fillColor = thisSvg.getAttribute('fill');\n      // Get original color and save it.\n      if (!this.svgCountryStyleRGB.isSaved) {\n        this.svgCountryStyleRGB = {\n          originalColor: styleFillColor ?? '',\n          isSaved: true\n        };\n      }\n      if (styleFillColor == this.svgCountryStyleRGB.originalColor) {\n        // thisSvg.setAttribute('fill', 'blue');\n        thisSvg.style.fill = 'blue';\n      } else {\n        // thisSvg.setAttribute('fill', 'orange');\n        thisSvg.style.fill = this.svgCountryStyleRGB.originalColor;\n      }\n    }\n    // alert(\"You clicked the circle\");\n  }\n\n  svgRoom(objectId: string) {\n    const thisSvg = document.getElementById(objectId);\n    if (thisSvg) {\n      const fillPoly = thisSvg.querySelector('.room-fill');\n      if (fillPoly) {\n        const styleFillColor = getComputedStyle(fillPoly).fill;\n        let fillColor = fillPoly.getAttribute('fill');\n        // Get original color and save it.\n        if (!this.svgRoomStyleRGB.isSaved) {\n          this.svgRoomStyleRGB = {\n            originalColor: styleFillColor ?? '',\n            isSaved: true\n          };\n        }\n        if (styleFillColor == this.svgRoomStyleRGB.originalColor) {\n          // fillPoly.style.fill = 'blue';\n          fillPoly.setAttribute('fill', 'blue');\n        } else {\n          // fillPoly.style.fill = this.svgRoomStyleRGB.originalColor;\n          thisSvg.setAttribute('fill', this.svgRoomStyleRGB.originalColor);\n        }\n      }\n    }\n    // alert(\"You clicked the circle\");\n  }\n\n}\n\n  /**\n * Begin Program\n */\n\nconst svgtest = new SvgTest();\n// document.getElementById('circle1')?.addEventListener('click', svgtest.svgCircle);\ndocument.getElementById('circleFillAttr')?.addEventListener('click', function () {\n  svgtest.svgCircleFillAttr('circleFillAttr')\n});\ndocument.getElementById('circleFillStyle')?.addEventListener('click', function () {\n  svgtest.svgCircleFillStyle('circleFillStyle')\n});\ndocument.getElementById('triangle1')?.addEventListener('click', svgtest.svgTriangle);\ndocument.getElementById('hexagon1')?.addEventListener('click', function() {\n  svgtest.svgHexagon('hexagon1')\n});\ndocument.getElementById('star1')?.addEventListener('click', svgtest.svgStar);\ndocument.getElementById('hexagon2')?.addEventListener('click', function() {\n  svgtest.svgHexagon('hexagon2')\n});\ndocument.getElementById('hexagon3')?.addEventListener('click', function() {\n  svgtest.svgHexagon('hexagon3')\n});\n\n// Room layout\ndocument.getElementById('Room1')?.addEventListener('click', function() {\n  svgtest.svgRoom('Room1')\n});\n\n// Map of Africa\ndocument.getElementById('Marokko')?.addEventListener('click', function() {\n  svgtest.svgCountryStyle('Marokko')\n});\nconsole.info(\"svg-test page is loaded...\");\n\n"],"names":["svgtest","constructor","this","isShowSvg","fileLocation","circleFillAttrRGB","originalColor","isSaved","circleFillStyleRGB","svgCountryStyleRGB","svgRoomStyleRGB","setDefaults","svgCircleFillAttr","objectId","thisSvg","document","getElementById","getComputedStyle","fill","fillColor","getAttribute","setAttribute","svgCircleFillStyle","styleFillColor","style","svgTriangle","svgHexagon","svgStar","svgCountryStyle","svgRoom","fillPoly","querySelector","addEventListener","console","info"],"sourceRoot":""}